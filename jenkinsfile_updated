pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "mohitgaur1272/local_practice"  // Docker image name
        VERSION = "${env.BUILD_NUMBER}"              // Unique version for every build
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials" // Docker Hub credentials ID
        CONTAINER_NAME = "demo_container"            // Container name
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Pull code from repository
                git branch: 'main', url: 'https://github.com/mohitgaur1272/docker_deployment_cicd.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with the current version
                    sh "docker build -t ${DOCKER_IMAGE}:${VERSION} ."
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub and push the image
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                        sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                    }
                }
            }
        }
        stage('delete old conatiner') {
            steps {
                script {
                    //delete old_container 
                    sh "docker rm -f ${CONTAINER_NAME}"
                }
            }
        }    
        stage('Deploy New Container') {
            steps {
                script {
                    // Run a new container with the latest image
                    sh "docker run -d --name ${CONTAINER_NAME} -p 82:80 ${DOCKER_IMAGE}:${VERSION}"
                }
            }
        }
        stage('delete unnassary image'){
            steps {
                script {
                    //delete unusefull image from local 
                    sh "docker rmi -f \$(docker images | grep '${DOCKER_IMAGE}' | awk '{print \$3}') || true"
                }
            }
        }
    }
    post {
        always {
            // Clean workspace after build
            cleanWs()
        }
    }
}
